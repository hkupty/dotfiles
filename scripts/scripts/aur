#!/bin/env bash
green=$(tput setaf 2)
orange=$(tput setaf 3)
blue=$(tput setaf 4)
red=$(tput setaf 1)
normal=$(tput sgr0)
tick=("${green}✔${normal}" "${red}✖${normal}")
git_dirty=("" "${blue}[has files changed]${normal}")
git_update=("" "${orange}[has upstream changes]${normal}")
git_local_commit=("" "${red}[has local changes]${normal}")

_test_pkg(){
  pacman -Qq "$1" > /dev/null 2>&1
  echo $?
}

_test_dirty(){
  cd $AUR_DIR/$1
  expr $(git status -s -uno | wc -l) \> 0
}

_test_update(){
  cd $AUR_DIR/$1
  expr $(git log master..origin/master| wc -l) \> 0
}

_update_local_git() {
  git fetch > /dev/null 2>&1
}

_test_local_commit(){
  cd $AUR_DIR/$1
  expr $(git log origin/master..master| wc -l) \> 0
}

is-sub() {
  return $([ -f .gitmodules ])
}

update() {
  for pkg in "$@"; do
    cd "$AUR_DIR/$pkg"
    git stash
    git fetch && git merge origin master -s recursive -Xtheirs --no-ff --no-edit
    if is-sub ; then
      git submodule sync && git submodule foreach "makepkg -sic --noconfirm --asdeps"
    fi
    makepkg -sic --noconfirm
  done
}

deinst() {
  sudo pacman -Rnscc $1 --noconfirm
}

add() {
  cd "$AUR_DIR"
  echo "Adding $1"
  git clone "https://aur.archlinux.org/$1.git"
}

add-dep-of() {
  cd "$AUR_DIR/$2"
  echo "Adding $1 to $2"
  git submodule add "https://aur.archlinux.org/$1.git" && git commit -am "Adding '$1' as dependency"
}

rm-dep-of() {
  cd "$AUR_DIR/$2"
  echo "Removing $1 of $2"
  git submodule deinit "$1" && git rm "$1" && git commit -m "Removing '$2' dependency"
  rm -rf "$2"
}

list() {
  pkgs=$(ls -1 "$AUR_DIR")
  printf "? %25s %-15s\n" "Package" "Git Status"
  for pkg in $pkgs; do
    (cd $AUR_DIR/$pkg
    _update_local_git "$pkg"
    installed=$(_test_pkg "$pkg")
    dirty=$(_test_dirty "$pkg")
    update=$(_test_update "$pkg")
    local_commit=$(_test_local_commit "$pkg")

    printf "%s %25s %15s\n" "${tick[$installed]}" "$pkg" "${git_dirty[$dirty]}${git_update[$update]}${git_local_commit[$local_commit]}") &
  done
  wait
}

purge() {
  pkgs=$(ls -1 "$AUR_DIR")
  for pkg in $pkgs; do
    [[ $(_test_pkg "$pkg") -eq 1 ]] && {
      echo "Removing $pkg"
      rm -rf $AUR_DIR/$pkg
    }
  done
}

edit() {
  bash -c "$EDITOR $AUR_DIR/$1/PKGBUILD"
}

with-clean() {
 cd "$AUR_DIR/$2"
 rm -f "$2"-*pkg.tar.xz
 run "$@"
}

run(){
  cmd=$1
  shift
  case $cmd in
    ls) list;;
    edit) edit "$1";;
    with-clean|force) with-clean "$@";;
    up|update) update "$@" ;;
    purge) purge ;;
    rm|remove) deinst $1 ;;
    add) add $1 ;;
    dep|dep-add) add-dep-of $1 $2 ;;
    dep-rm) rm-dep-of $1 $2 ;;
    *)
      echo <<- EOS
aur script helper
usage:
  ls            list aur dir
  up [pkg]      update selected package
EOS
  ;;
  esac
}

run "$@"
